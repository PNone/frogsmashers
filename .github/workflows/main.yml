name: Frog Smashers Unity Actions
# Frog Smashers Unity Actions (Copied from https://github.com/game-ci/unity-actions-example/blob/main/.github/workflows/main.yml)


# on:
#   # pull_request: {}
#   # push: {}
#   push:
#     branches:
#       - master
on:
  push:
    tags:
      - '*'

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
  PROJECT_PATH: HohimBrueh

jobs:
  checklicense:
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        # https://github.com/game-ci/unity-request-activation-file/releases/
        uses: game-ci/unity-request-activation-file@v2
        with:
          unityVersion: "2021.3.23f1"
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  test:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Test all modes âœ¨
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-
      # https://github.com/game-ci/unity-test-runner/releases/
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          testMode: all
          customParameters: "-nographics"
      - uses: actions/upload-artifact@v3
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  buildWithLinux:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneLinux64
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      # https://github.com/game-ci/unity-builder/releases/
      - uses: game-ci/unity-builder@v2
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Tag
      - uses: actions/upload-artifact@v3
        with:
          name: FrogSmashersLinux64
          path: build
      - name: Zip up output
        run: |
          cd build/StandaloneLinux64
          ls
          zip -r ../../FrogSmashersLinux64.zip *
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ env.GIT_ACCESS_TOKEN }}
          files: FrogSmashersLinux64.zip

  buildWithMac:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for MacOs
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: game-ci/unity-builder@v2
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Tag
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: FrogSmashersOSX
          path: build
      - name: Zip up output
        run: |
          cd build/StandaloneOSX
          ls
          zip -r ../../FrogSmashersOSX.zip *
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ env.GIT_ACCESS_TOKEN }}
          files: FrogSmashersOSX.zip
#       - name: Upload binaries to release
#         uses: svenstaro/upload-release-action@v2
#         with:
#           repo_name: PNone/frogsmashers
#           # A personal access token for the GitHub repository in which the release will be created and edited.
#           # It is recommended to create the access token with the following scopes: `repo, user, admin:repo_hook`.
#           repo_token: ${{ env.GIT_ACCESS_TOKEN }}
#           file: build/StandaloneOSX
#           asset_name: StandaloneOSX
#           tag: ${{ github.ref }}
#           overwrite: true
#           body: "New release for frog smashers"

  buildWithWindows:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for Windows
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
#           - StandaloneWindows
          - StandaloneWindows64
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      - uses: game-ci/unity-builder@v2
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: Tag
      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
#           name: StandaloneWindows64
          name: FrogSmashersWindows64
          path: build
      - name: Zip up output
        run: |
          cd build/StandaloneWindows64
          ls
          Compress-Archive -Path . -DestinationPath ../../FrogSmashersWindows64.zip
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ env.GIT_ACCESS_TOKEN }}
          files: FrogSmashersWindows64.zip
#       - name: Upload binaries to release
#         uses: svenstaro/upload-release-action@v2
#         with:
#           repo_name: PNone/frogsmashers
#           # A personal access token for the GitHub repository in which the release will be created and edited.
#           # It is recommended to create the access token with the following scopes: `repo, user, admin:repo_hook`.
#           repo_token: ${{ env.GIT_ACCESS_TOKEN }}
#           file: build/StandaloneWindows64
#           asset_name: StandaloneWindows64
#           tag: ${{ github.ref }}
#           overwrite: true
#           body: "New release for frog smashers"
